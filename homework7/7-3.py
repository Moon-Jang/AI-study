import numpy as np


def act_sigmoid(x):
    return 1.0 / (1.0 + np.exp(-x))


seven_segment_list = np.array([
    [0.1, 1.0, 1.0, 1.0, 0.1,  # 0
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1],
    [0.1, 0.1, 0.1, 0.1, 1.0,  # 1
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0],
    [0.1, 1.0, 1.0, 1.0, 0.1,  # 2
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1,
     1.0, 0.1, 0.1, 0.1, 0.1,
     1.0, 0.1, 0.1, 0.1, 0.1,
     0.1, 1.0, 1.0, 1.0, 0.1],
    [0.1, 1.0, 1.0, 1.0, 0.1,  # 3
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1],
    [1.0, 0.1, 0.1, 0.1, 1.0,  # 4
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0],
    [0.1, 1.0, 1.0, 1.0, 0.1,  # 5
     1.0, 0.1, 0.1, 0.1, 0.1,
     1.0, 0.1, 0.1, 0.1, 0.1,
     0.1, 1.0, 1.0, 1.0, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1],
    [0.1, 1.0, 1.0, 1.0, 0.1,  # 6
     1.0, 0.1, 0.1, 0.1, 0.1,
     1.0, 0.1, 0.1, 0.1, 0.1,
     0.1, 1.0, 1.0, 1.0, 0.1,
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1],
    [0.1, 1.0, 1.0, 1.0, 1.0,  # 7
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0],
    [0.1, 1.0, 1.0, 1.0, 0.1,  # 8
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1,
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1],
    [0.1, 1.0, 1.0, 1.0, 0.1,  # 9
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1]
])

target = np.zeros((10, 10), dtype="float64")

for i in range(10):
    target[i][i] = 1.0

w = np.zeros((10, 35))

for i in range(10):
    for j in range(35):
        w[i][j] = np.random.rand() / 10.0

lrate = 0.1
out = np.zeros(10)
y = np.zeros(10)
# learning logic start
print("※ learning start")
for epoch in range(10000):
    print("epoch ", epoch)
    total_square_sum = 0.0
    for p in range(10):
        pattern_square_sum = 0.0
        for i in range(10):
            out[i] = 0.0
            for j in range(35):
                out[i] += w[i][j] * seven_segment_list[p][j]
            y[i] = act_sigmoid(out[i])
        # print(y)
        for i in range(10):
            error = target[p][i] - y[i]
            pattern_square_sum += error ** 2
            for j in range(35):
                w[i][j] = w[i][j] + lrate * error * y[i] * (1 - y[i]) * seven_segment_list[p][j]
        total_square_sum += pattern_square_sum
    if total_square_sum < 0.1:
        break
        
print("※ learning end")
# learning logic end

# evaluating logic start
print("※ evaluating start")
testcases = [
    [0.1, 0.1, 0.1, 0.1, 0.1,
     1.0, 0.1, 0.1, 0.1, 0.1,
     1.0, 0.1, 0.1, 0.1, 0.1,
     0.1, 1.0, 1.0, 0.1, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 0.1, 0.1],
    [0.1, 1.0, 1.0, 1.0, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 0.1],
    [0.1, 1.0, 1.0, 0.1, 0.1,
     0.1, 0.1, 0.1, 0.1, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 1.0, 0.1, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 1.0, 1.0, 1.0, 0.1],
    [0.1, 0.1, 0.1, 0.1, 0.1,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 0.1, 0.1, 0.1,
     0.1, 0.1, 0.1, 0.1, 0.1],
    [0.1, 1.0, 1.0, 1.0, 0.1,
     1.0, 0.1, 0.1, 0.1, 0.1,
     0.1, 0.1, 0.1, 0.1, 0.1,
     0.1, 0.1, 1.0, 0.1, 0.1,
     1.0, 0.1, 0.1, 0.1, 1.0,
     1.0, 0.1, 0.1, 0.1, 1.0,
     0.1, 0.1, 1.0, 0.1, 0.1],
]

for p in range(len(testcases)):
    arr = []
    for i in range(10):
        out[i] = 0.0
        for j in range(35):
            out[i] += w[i][j] * testcases[p][j]
        y[i] = act_sigmoid(out[i])
        arr.append(y[i])
    print("testcase", p + 1, ":  ", arr.index(max(arr)))
print("※ evaluating end")
# evaluating logic end
